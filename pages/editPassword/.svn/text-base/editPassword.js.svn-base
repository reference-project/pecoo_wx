var app = getApp();
const api = require('../../utils/api.js')
const utilMd5 = require('../../utils/md5.js')
Page({

  /**
   * 页面的初始数据
   */
  data: {
    tokenId:'',
    userName:'',
    oldpassword:'',
    newpassword1:'',
    newpassword2:''
  },

  /**
   * 生命周期函数--监听页面加载
   */
  oldInput: function (e) {
    this.data.oldpassword = e.detail.value;
  },
  newInput1: function (e) {
    this.data.newpassword1 = e.detail.value;
  },
  newInput2: function (e) {
    this.data.newpassword2 = e.detail.value;
  },
  checkPas(){
    var ckupwd = /^[0-9a-zA-Z_-]+$/;
    var that = this;
    if (that.data.oldpassword == "") {
      return app.showErrorModal("密码不能为空！");
    }
    if (that.data.newpassword1 == "") {
      return app.showErrorModal("新密码不能为空！");
    }
    if (that.data.newpassword2 == "") {
      return app.showErrorModal("确认密码不能为空！");
    }
    if (that.data.oldpassword.length < 6 || that.data.oldpassword.length > 16) {
      return app.showErrorModal("密码长度为6~16位字符！");
    }
    if (that.data.newpassword1.length < 6 || that.data.newpassword1.length > 16) {
      return app.showErrorModal("新密码长度为6~16位字符！");
    }
    if (that.data.newpassword2.length < 6 || that.data.newpassword2.length > 16) {
      return app.showErrorModal("确认密码长度为6~16位字符！");
    }

    if (!ckupwd.test(that.data.oldpassword)) {
      return app.showErrorModal("密码请使用[数字/字母/中划线/下划线]！");
    }
    if (!ckupwd.test(that.data.newpassword1)) {
      return app.showErrorModal("新密码请使用[数字/字母/中划线/下划线]！");
    }
    if (!ckupwd.test(that.data.newpassword2)) {
      return app.showErrorModal("密码请使用[数字/字母/中划线/下划线]！");
    }	
    if (that.data.newpassword1 != that.data.newpassword2) {
      return app.showErrorModal("两次密码输入不一致！");
    }	
  },
  changePassword() {
    let that = this;
    var ckupwd = /^[0-9a-zA-Z_-]+$/;
    if (that.data.oldpassword == "") {
      return app.showErrorModal("密码不能为空！");
    }
    if (that.data.newpassword1 == "") {
      return app.showErrorModal("新密码不能为空！");
    }
    if (that.data.newpassword2 == "") {
      return app.showErrorModal("确认密码不能为空！");
    }
    if (that.data.oldpassword.length < 6 || that.data.oldpassword.length > 16) {
      return app.showErrorModal("密码长度为6~16位字符！");
    }
    if (that.data.newpassword1.length < 6 || that.data.newpassword1.length > 16) {
      return app.showErrorModal("新密码长度为6~16位字符！");
    }
    if (that.data.newpassword2.length < 6 || that.data.newpassword2.length > 16) {
      return app.showErrorModal("确认密码长度为6~16位字符！");
    }

    if (!ckupwd.test(that.data.oldpassword)) {
      return app.showErrorModal("密码请使用[数字/字母/中划线/下划线]！");
    }
    if (!ckupwd.test(that.data.newpassword1)) {
      return app.showErrorModal("新密码请使用[数字/字母/中划线/下划线]！");
    }
    if (!ckupwd.test(that.data.newpassword2)) {
      return app.showErrorModal("密码请使用[数字/字母/中划线/下划线]！");
    }
    if (that.data.newpassword1 != that.data.newpassword2) {
      return app.showErrorModal("两次密码输入不一致！");
    }	
    let changePassword = api.changePasswordUrl({
      sourceMode: app.globalData.sourceMode,
      tokenId: that.data.tokenId,
      mobile: that.data.userName,
      oldPwd: utilMd5.hexMD5(that.data.oldpassword),
      pwd: utilMd5.hexMD5(that.data.newpassword1)
    });
    changePassword.then((res) => {
      if (res.code == "0000") {
        console.log(2)
        wx.showModal({
          title: '提示',
          content: '修改密码成功',
          showCancel: false,
          success: function (res) {
            if (res.confirm) {
              wx.navigateBack({
                delta: 1
              })
            }
          }
        })
        
      } else {
        return app.showErrorModal(res.message);
      }

    }).catch((error) => {
      console.log(error)
    })
   
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {
    this.setData({
      tokenId: wx.getStorageSync('tokenId'),
      userName: wx.getStorageSync('userName'),
    })
  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
    
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {
  
  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {
  
  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {
  
  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {
  
  },

  /**
   * 用户点击右上角分享
   */
  // onShareAppMessage: function () {
  
  // }
})